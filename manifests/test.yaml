# k8s-manifest.yml

apiVersion: v1
kind: Namespace
metadata:
  name: www-example-com

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: app-efs-claim
  namespace: www-example-com
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: efs-sc
  resources:
    requests:
      storage: 5Gi

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: proxy-nginx-conf
  namespace: www-example-com
data:
  nginx.conf: |-
    user  nginx;
    worker_processes  1;

    pid        /var/run/nginx.pid;

    events {
        worker_connections  1024;
    }

    http {
        include       /etc/nginx/mime.types;
        default_type  application/octet-stream;

        sendfile        on;
        keepalive_timeout  65;

        index  index.html index.htm;

        server {
            listen 81;

            client_max_body_size 50M;

            location / {
                alias   /var/www/;
            }
        }
    }

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: index-html-conf
  namespace: www-example-com
data:
  index.html: |-
    <meta charset="UTF-8">Hi.<br>â€“ schmillin

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  namespace: www-example-com
  labels:
    app: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      volumes:
        - name: nginx-proxy-config
          configMap:
            name: proxy-nginx-conf
        - name: index-html-config
          configMap:
            name: index-html-conf
        - name: app-persist
          persistentVolumeClaim:
            claimName: app-efs-claim
      terminationGracePeriodSeconds: 5
      containers:
        - name: nginx
          image: nginx:alpine
          resources:
            requests:
              memory: "25Mi"
              cpu: "25m"
          ports:
            - containerPort: 81
          volumeMounts:
            - name: nginx-proxy-config
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
            - name: index-html-config
              mountPath: /var/www/index.html
              subPath: index.html
            - name: app-persist
              subPath: web
              mountPath: /var/www/web

---

apiVersion: v1
kind: Service
metadata:
  annotations:
    alb.ingress.kubernetes.io/target-type: ip
  name: "nginx-service"
  namespace: www-example-com
spec:
  ports:
    - port: 82
      targetPort: 81
      protocol: TCP
  type: NodePort
  selector:
    app: nginx

---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: "nginx-ingress"
  namespace: www-example-com
  annotations:
    alb.ingress.kubernetes.io/actions.ssl-redirect:
      '{"Type": "redirect", "RedirectConfig":
      { "Protocol": "HTTPS", "Port": "443", "StatusCode": "HTTP_301"}}'
    alb.ingress.kubernetes.io/group.name: backend-ingress
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: "15"
    alb.ingress.kubernetes.io/healthcheck-path: /
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: "5"
    alb.ingress.kubernetes.io/healthy-threshold-count: "2"
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS":443}]'
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/success-codes: 301,302,200
    alb.ingress.kubernetes.io/unhealthy-threshold-count: "2"
    kubernetes.io/ingress.class: alb
spec:
  rules:
    - http:
        paths:
          - path: /*
            backend:
              serviceName: ssl-redirect
              servicePort: use-annotation
          - path: /*
            backend:
              serviceName: nginx-service
              servicePort: 82
